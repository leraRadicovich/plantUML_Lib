@startuml
/'1. ПАРАМЕТРЫ И РУБИЛЬНИКИ
=========================================================================================================================
Идентификатор взаимодействия, повторяет значение autonumber'/
!$id = 0

/'Вспомогательные буфферные параметры'/
!$textResult = ""
!$actionResult = ""
!$commentResult = ""
!$initiatorName = ""
!$executorName = ""
!$getInitiator = ""
!$getExecutor = ""
!$getEvent = ""
!$getStatusEvent = ""
!$getStartEvent = ""
!$getFinishEvent = ""
!$getDescriptionEvent = ""
!$getType = ""

/'Параметры, ограничивающие длину строк в ячейках в таблице'/
!$actionLength = 20
!$commentLength = 35

/'Переменные с заголовками для легенды диаграммы'/
!$processMap = "| # | Инициатор | Исполнитель | Действие | Комментарий |"
!$auditTable = "| # | name | start | finish | status | description |"

/'Выявленные в процессе моделирования доработки'/
!$todoList = "| № | id обнаружения | Суть доработки|"
!$todoId = 0

/'Переменная для событий аудита'/
!$auditId = 0


/'2. ФУНКЦИОНАЛЬНЫЕ ПРОЦЕДУРЫ
========================================================================================
Процедуры, заменяющие штатные средства plantUml, например: создание участников,
отрисовка стрелок, отрисовка таблиц и т.д.

Вспомогательная процедура отрисовки участников: формирует мапу имя:алиас'/
!unquoted procedure parties($partyType, $name, $alias, $order="")
    !if $order != ""
        $partyType "$name" as $alias order $order
    !else
        $partyType "$name" as $alias
    !endif
    !$aliasName = "name" + $alias
    %set_variable_value($aliasName,$name)
!endprocedure

/'Процедуры rq и rs заменяют синтаксис рисования стрелок.'/
!unquoted procedure rq($initiator, $executor, $liveLine="",$action, $comment="")
    /'проверяем, что указанные initiator и executor объявлены на диаграмме,
    если нет - будут объявлены с именем и алиасом, указанными в этом шаге'/
    !if $initiator == "*"
        %invoke_procedure("altr",$executor,$liveLine,$action, $comment)
    !else
        !$id = $id + 1
        %invoke_procedure("aliasCheck",$initiator)
        %invoke_procedure("aliasCheck",$executor)
        !if $liveLine == "..."
            $initiator -> $executor: $action
            ...
        !else
            $initiator -> $executor $liveLine: $action
        !endif
        %invoke_procedure("setMetadataVariable", $initiator, $executor, $liveLine, $action, $comment, "request")
    !endif
!endprocedure

!unquoted procedure rs($executor, $initiator, $liveLine="",$action, $comment="")
    /'Если не указать участников взаимодействия, процедура построит ответ, инвертировав
    предыдущий шаг'/
    !if $executor == "*"
        %invoke_procedure("altr",$initiator,$liveLine,$action, $comment)
    !else
        !if $executor == "" && $initiator == ""
            !$idInitiator = $id + "initiator"
            !$idExecutor = $id + "executor"
            !$ainitiator = %get_variable_value($idInitiator)
            !$aexecutor = %get_variable_value($idExecutor)
            %invoke_procedure("rs", $aexecutor, $ainitiator, $liveLine, $action, $comment)
        !else
            !if $liveLine == "..."
                $executor --> $initiator: $action
                ...
            !else
                $executor --> $initiator $liveLine: $action
            !endif
            !$id = $id + 1
            /'Для корректного отображения в карте процесса меняем исполнителя и иницатора местами'/
            %invoke_procedure("setMetadataVariable", $executor, $initiator, $liveLine, $action, $comment, "response")
        !endif
    !endif
!endprocedure

/'Процедура для копирования уже нарисованной стрелки'/
!unquoted procedure altr($i, $liveLine="", $action="", $comment="")
    %invoke_procedure("getMetadataByStepForCopy", $i)
    !if $getType == "request"
        %invoke_procedure("rq", $getInitiator, $getExecutor, $liveLine, $action, $comment)
    !elseif $getType == "response"
        %invoke_procedure("rs", $getInitiator, $getExecutor, %string($liveLine), $action, $comment)
    !endif
    %invoke_procedure("bufferVariableCleaner")
!endprocedure

/'Процедура для обработки событий Аудит'/
!unquoted procedure audit($event, $status = "", $description = "", $source = "pafp")
    !if $status == ""
        !$startEvent = "start" + $event
        %set_variable_value($startEvent,$id)
        hnote over $source #lightyellow/lightgreen: <color:red><&media-play> <color:black>$event
    !else
        !$auditId = $auditId + 1
        !$key = "start" + $event
        !$startEvent = %get_variable_value($key)
        %invoke_procedure("setAuditVariable", $auditId, $event, $status, $startEvent, $id, $description)
        !if $status == "FAILURE"
            hnote over $source #orange/red: <color:red><&media-stop> <color:black>$event
        !else
            hnote over $source #lightyellow/lightgreen: <color:red><&media-stop> <color:black>$event
        !endif
    !endif
!end procedure

/'Процедура создания списка дел'/
!unquoted procedure todo($td)
    !$todoId = $todoId + 1
    !$todoIdStep = $todoId + "step"
    !$todoIdDescription = $todoId + "todotext"
    %set_variable_value($todoIdStep, $id)
    %set_variable_value($todoIdDescription, $td)
!endprocedure

/'Процедура, отображающая таблицу с заметками'/
!unquoted procedure todoNote()
note across
Список доработок
====
$todoList
end note
!end procedure

/'Процедура, отвечающая за отображение таблицы с описанием процесса.'/
!unquoted procedure NOTE()
    /'Строим крату процесса'/
    note across
**КАРТА ПРОЦЕССА**
$processMap
%invoke_procedure("proccessMapBuilder")
    end note
!end procedure

/'Процедура рисует строку из карты процесса для последней нарисованной стрелки'/
!unquoted procedure partnote()
    %invoke_procedure("getMetadataByStep",$id)
    /'Формируем таблицу для легенды'/
    note across
    $processMap
    | $id | $initiatorName | $executorName | $actionResult | $commentResult |
    end note
    %invoke_procedure("bufferVariableCleaner")
!end procedure

/'Строим крату процесса, таблицу событий аудита и список доработок'/
!unquoted procedure LEGEND()
legend  left
**КАРТА ПРОЦЕССА**
====
$processMap
%invoke_procedure("proccessMapBuilder")
====
**СОБЫТИЯ АУДИТА**
====
$auditTable
%invoke_procedure("auditTableBuilder")
====
**СПИСОК ДОРАБОТОК**
====
$todoList
%invoke_procedure("todoTableBuilder")
end legend
!endprocedure

/'3. СЛУЖЕБНЫЕ ПРОЦЕДУРЫ
=========================================================================================================================
Процедуры, выполняющие служебные функции и операции с параметрами

/'Вспомогательная процедура, отвечает за построчное отображение текста'/
!unquoted procedure $textNewLineCutter($text, $length)
    !while %strpos(%substr($text,%intval($length)), " ") > 0 /'Пока в строке есть пробелы после ограничителя длины $length - делать перенос'/
    !$cutPosition = $length + %strpos(%substr($text, $length), " ") /'Поиск пробела'/
    !$textResult = $textResult + %substr($text, 0, $cutPosition) + "\n"
    !$text = %substr($text,%intval($cutPosition))
    !endwhile
    !$textResult = $textResult + $text
!endprocedure

/'Вспомогательная процедура для проверки существования участника по его алиасу'/
!unquoted procedure aliasCheck($alias)
    !$key = "name" + $alias
    !if %not(%variable_exists($key))
        !$a = %substr($alias,0,1)
        !$a = %upper($a)
        !$b = %substr($alias,1)
        !$resultName = $a + $b
        !if $alias == "user" || $alias == "client"
            %invoke_procedure("parties",actor,$resultName,$alias)
        !elseif $alias == "redis" || $alias == "PostgreSql" || $alias == "postgre" || $alias == "postgreSQL"
            %invoke_procedure("parties",database,$resultName,$alias)
        !elseif $alias == "kafka" || $alias == "rabbit" || $alias == "MQ"
            %invoke_procedure("parties",queue,$resultName,$alias)
        !else
            %invoke_procedure("parties",participant,$resultName,$alias)
    !endif
!endprocedure

/'Процедура, создающая и запоминающая идентификатор - якорь'/
!unquoted procedure anchor($name)
    %set_variable_value($name,$id)
!end procedure

/'Процедура сохранения метаинформации по id шага процесса'/
!unquoted procedure setMetadataVariable($initiator, $executor, $liveline, $action, $comment, $type)
    !$idInitiator = $id + "initiator"
    !$idExecutor = $id + "executor"
    !$idAction = $id + "action"
    !$idComment = $id + "comment"
    !$idLiveline = $id + "liveline"
    !$idType = $id + "type"
    %set_variable_value($idInitiator,$initiator)
    %set_variable_value($idExecutor,$executor)
    %set_variable_value($idAction,$action)
    %set_variable_value($idComment,$comment)
    %set_variable_value($idLiveline,$liveline)
    %set_variable_value($idType,$type)
!endprocedure

/'Процедура для получения информации по шагу процесса для построения карты процесса
Соблюдением стиля кода пришлось пренебречь, т.к. иначе легенда не может построить таблицу'/
!unquoted procedure getMetadataByStep($i)
    /'Форматируем текст действия и комментария в многострочный вид'/
    !$idAction = $i + "action"
    !$keyAction = %get_variable_value($idAction)
    !$actionResult = $keyAction
    /'Текст комментария'/
    !$idComment = $i + "comment"
    !$keyComment = %get_variable_value($idComment)
    !$commentResult = $keyComment
    /'Получаем алиасы иницатора и исполнителя на каждом шаге,
    затем получаем их имена по полученным алиасам'/
    !$idInitiator = $i + "initiator"
    !$keyInitiator = %get_variable_value($idInitiator)
    !$keyInitiator = "name" + $keyInitiator
    !$initiatorName = %get_variable_value($keyInitiator)
    !$idExecutor = $i + "executor"
    !$keyExecutor = %get_variable_value($idExecutor)
    !$keyExecutor = "name" + $keyExecutor
    !$executorName = %get_variable_value($keyExecutor)
    !$idLiveline = $i + "liveline"
    !$keyLiveline = %get_variable_value($idLiveline)
    !$idType = $i + "type"
    !$keyType = %get_variable_value($idType)
!endprocedure

/'Процедура для получения информация по шагу процесса для его копирования'/
!unquoted procedure getMetadataByStepForCopy($i)
    !$idInitiator = $i + "initiator"
    !$getInitiator = %get_variable_value($idInitiator)

    !$idExecutor = $i + "executor"
    !$getExecutor = %get_variable_value($idExecutor)

    !$idType = $i + "type"
    !$getType = %get_variable_value($idType)
!end procedure

/'Процедура для очистки буфферных переменных'/
!unquoted procedure bufferVariableCleaner()
    !$actionResult = ""
    !$commentResult = ""
    !$initiatorName = ""
    !$executorName = ""
    !$textResult = ""
    !$getInitiator = ""
    !$getExecutor = ""
    !$getType = ""
!endprocedure

!unquoted procedure setAuditVariable($auditId, $event, $status, $startEvent, $finishEvent, $description)
    !$auditIdEvent = $auditId + "event"
    !$auditIdStatus = $auditId + "status"
    !$auditIdStartEvent = $auditId + "startEvent"
    !$auditIdFinishEvent = $auditId + "finishEvent"
    !$auditIdDescriptionEvent = $auditId + "description"
    %set_variable_value($auditIdEvent, $event)
    %set_variable_value($auditIdStatus, $status)
    %set_variable_value($auditIdStartEvent, $startEvent)
    %set_variable_value($auditIdFinishEvent, $finishEvent)
    %set_variable_value($auditIdDescriptionEvent, $description)
!endprocedure

!unquoted procedure getAuditVariable($i)
    !$auditIdEvent = $i + "event"
    !$auditIdStatus = $i + "status"
    !$auditIdStartEvent = $i + "startEvent"
    !$auditIdFinishEvent = $i + "finishEvent"
    !$auditIdDescriptionEvent = $i + "description"
    !$getEvent = %get_variable_value($auditIdEvent)
    !$getStatusEvent = %get_variable_value($auditIdStatus)
    !$getStartEvent = %get_variable_value($auditIdStartEvent)
    !$getFinishEvent = %get_variable_value($auditIdFinishEvent)
    !$getDescriptionEvent = %get_variable_value($auditIdDescriptionEvent)
!endprocedure

!unquoted procedure auditVariableCleaner()
    !$getEvent = ""
    !$getStatusEvent = ""
    !$getStartEvent = ""
    !$getFinishEvent = ""
    !$getDescriptionEvent = ""
!endprocedure

/'Процедура построения карты процесса'/
!unquoted procedure proccessMapBuilder()
!$i = 1
!while $i < $id || $i == $id
%invoke_procedure("getMetadataByStep",$i)
%invoke_procedure("$textNewLineCutter", $actionResult, $actionLength)
!$actionText = $textResult
!$textResult = ""
%invoke_procedure("$textNewLineCutter", $commentResult, $commentLength)
!$commentText = $textResult
!$textResult = ""
| $i | $initiatorName | $executorName | $actionText | $commentText |
!$i = $i + 1
%invoke_procedure("bufferVariableCleaner")
!endwhile
!endprocedure

/'Процедура построения таблицы со списком доработок'/
!unquoted procedure todoTableBuilder()
!$i = 1
!while $i < $todoId || $i == $todoId
!$key = $i + "step"
!$desc =$i  + "todotext"
!$getTodoIdStep = %get_variable_value($key)
!$getTodoIdDescription = %get_variable_value($desc)
%invoke_procedure("$textNewLineCutter", $getTodoIdDescription, $commentLength)
!$getTodoIdDescription = $textResult
!$textResult = ""
| $i | $getTodoIdStep | $getTodoIdDescription |
!$i = $i + 1
!endwhile
!endprocedure

/'Процедура построения таблицы аудита'/
!unquoted procedure auditTableBuilder()
!$i = 1
!while $i < $auditId || $i == $auditId
%invoke_procedure("getAuditVariable", $i)
%invoke_procedure("$textNewLineCutter", $getDescriptionEvent, $actionLength)
!$getDescriptionEvent = $textResult
!$textResult = ""
| $i | $getEvent | $getStartEvent | $getFinishEvent | $getStatusEvent | $getDescriptionEvent |
!$i = $i + 1
!endwhile
!endprocedure

/'4. ПАРАМЕТРЫ СТИЛЯ
========================================================================================================================='/
autonumber
!pragma teoz true
!theme cloudscape-design
skinparam dpi 70
skinparam maxMessageSize 400
skinparam backgroundColor LightGray
skinparam sequence {
ArrowColor blue
ActorBorderColor blue
LifeLineBorderColor blue
LifeLineBackgroundColor #White
ParticipantBorderColor blue
ParticipantBackgroundColor DodgerBlue
ParticipantFontName Impact
ParticipantFontSize 17
ParticipantFontColor #A9DCDF
ActorBackgroundColor DodgerBlue
ActorFontColor DeepSkyBlue
ActorFontSize 17
ActorFontName Aapex
}

!$link = "**<size:17><color:blue><&link-intact></color>**"
!$success = "**<size:20><color:green><&circle-check></color>**"
!$error = "**<size:20><color:red><&circle-x></color>**"
!$end = "**<size:20><color:red><&x></color>**"

header SequenceLib.v.3.1.Lite\n by PVR

/'САМА ДИАГРАММА
Данная диаграмма написана с применением библиотеки макросов автоподстановки, написанной Патрушевым Валерием.
Ознакомиться с билиотекой можно тут: https://github.com/leraRadicovich/plantUML_Lib
=========================================================================================================================
'/