@startuml
/'1. ПАРАМЕТРЫ И РУБИЛЬНИКИ
=========================================================================================================================
Идентификатор взаимодействия, повторяет значение autonumber'/
!$id = 0

/'Вспомогательные буфферные параметры'/
!$textResult = ""
!$actionResult = ""
!$commentResult = ""
!$initiatorName = ""
!$executorName = ""

/'Параметры, ограничивающие длину строк в ячейках в таблице'/
!$actionLength = 40
!$commentLength = 65

/'Переменная с легендой диаграммы'/
!$processMap = "| # | Инициатор | Исполнитель | Действие | Комментарий |"

/'Выявленные в процессе моделирования доработки'/
!$todoList = "| № | id обнаружения | Суть доработки|"
!$todoId = 0

/'Переменная для событий аудита'/
!$auditId = 0
!$auditTable = "| # | name | start | finish | status | description |"


/'2. ФУНКЦИОНАЛЬНЫЕ ПРОЦЕДУРЫ
========================================================================================
Процедуры, заменяющие штатные средства plantUml, например: создание участников,
отрисовка стрелок, отрисовка таблиц и т.д.

Вспомогательная процедура отрисовки участников: формирует мапу имя:алиас'/
!unquoted procedure parties($partyType, $name, $alias, $order="")
    !if $order != ""
        $partyType "$name" as $alias order $order
    !else
        $partyType "$name" as $alias
    !endif
    !$aliasName = "name" + $alias
    %set_variable_value($aliasName,$name)
!endprocedure

/'Процедуры rq и rs заменяют синтаксис рисования стрелок.'/
!unquoted procedure rq($initiator, $executor, $liveLine="",$action, $comment="")
    !$id = $id + 1
    /'проверяем, что указанные initiator и executor объявлены на диаграмме,
    если нет - будут объявлены с именем и алиасом, указанными в этом шаге'/
    %invoke_procedure("aliasCheck",$initiator)
    %invoke_procedure("aliasCheck",$executor)
    $initiator -> $executor $liveLine: $action
    %invoke_procedure("setMetadataVariable", $initiator, $executor, $action, $comment)
!endprocedure

/'Процедура строит ответ, инвертируя взаимодействие, заданное в $i'/
!unquoted procedure altrq($i=$id, $liveLine="", $action, $comment="")
        !$idInitiator = $i + "initiator"
        !$idExecutor = $i + "executor"
        !$ainitiator = %get_variable_value($idInitiator)
        !$aexecutor = %get_variable_value($idExecutor)
    %invoke_procedure("rq", $ainitiator, $aexecutor, $liveLine, $action, $comment)
!endprocedure

!unquoted procedure rs($executor, $initiator, $liveLine="",$action, $comment="")
    /'Если не указать участников взаимодействия, процедура построит ответ, инвертировав
    предыдущий шаг'/
    !if $executor == "" && $initiator == ""
        !$idInitiator = $id + "initiator"
        !$idExecutor = $id + "executor"
        !$ainitiator = %get_variable_value($idInitiator)
        !$aexecutor = %get_variable_value($idExecutor)
        %invoke_procedure("rs", $aexecutor, $ainitiator, $liveLine, $action, $comment)
    !else
        !if $liveLine == "..."
            $executor --> $initiator: $action
            ...
        !else
            $executor --> $initiator $liveLine: $action
        !endif
        !$id = $id + 1
        /'Для корректного отображения в карте процесса меняем исполнителя и иницатора местами'/
        %invoke_procedure("setMetadataVariable", $executor, $initiator, $action, $comment)
    !endif
!endprocedure

/'Процедура строит ответ, инвертируя взаимодействие, заданное в $i'/
!unquoted procedure altrs($i=$id, $liveLine="", $action, $comment="")
        !$idInitiator = $i + "initiator"
        !$idExecutor = $i + "executor"
        !$ainitiator = %get_variable_value($idInitiator)
        !$aexecutor = %get_variable_value($idExecutor)
    %invoke_procedure("rs", $aexecutor, $ainitiator, $liveLine, $action, $comment)
!endprocedure

/'Процедура для обработки событий Аудит'/
!unquoted procedure audit($event, $status = "", $description = "", $source = "pafp")
    !if $status == ""
        !$eventStart = "start" + $event
        %set_variable_value($eventStart,$id)
        hnote over $source #lightyellow/lightgreen: <color:red><&media-play> <color:black>$event
    !else
        %invoke_procedure("$textNewLineCutter",$description,$commentLength)
        !$auditDescription = $textResult
        !$textResult = ""
        !$auditId = $auditId + 1
        !$eventId = "aud" + $auditId
        !$key = "start" + $event
        !$startEvent = %get_variable_value($key)
        !$eventValue = "| " + $auditId + " | " + $event + " | " + $startEvent + " | " + $id + " | " + $status + " | " + $auditDescription + " |"
        %set_variable_value($eventId,$eventValue)
        !if $status == "FAILURE"
            hnote over $source #orange/red: <color:red><&media-stop> <color:black>$event
        !else
            hnote over $source #lightyellow/lightgreen: <color:red><&media-stop> <color:black>$event
        !endif
    !endif
!end procedure

/'Процедуры создания заметок в виде легенды в начале диаграммы'/
!unquoted procedure todo($td)
    !$todoId = $todoId + 1
    %invoke_procedure("$textNewLineCutter", $td,$commentLength) /'Форматирование текста построчно'/
    !$tdresult = $textResult
    !$textResult = ""
    !$todoList = $todoList + %newline() + "| " + $todoId + " | " + $id + " | " + $tdresult + " |"
!endprocedure

/'Процедура, отображающая таблицу с заметками'/
!unquoted procedure todoNote()
note across
Список доработок
====
$todoList
end note
!end procedure

/'Процедура, отвечающая за отображение таблицы с описанием процесса.'/
!unquoted procedure NOTE()
    /'Строим крату процесса'/
    %invoke_procedure("proccessMapBuilder")
    note across
    $processMap
    end note
    !$processMap = "| # | Инициатор | Исполнитель | Действие | Комментарий |"
!end procedure

/'Процедура рисует строку из карты процесса для последней нарисованной стрелки'/
!unquoted procedure partnote()
    %invoke_procedure("getMetadataByStep",$id)
    /'Формируем таблицу для легенды'/
    !$partNote = "| " +  $id + " | " + $initiatorName + " | "+ $executorName + " | " + $actionResult + " | " + $commentResult + " |"
    note across
    $partNote
    end note
    %invoke_procedure("bufferVariableCleaner")
!end procedure

/'Строим крату процесса, таблицу событий аудита и список доработок'/
!unquoted procedure LEGEND()
    /'Отображаем построенные таблицы при их наличии'/
    %invoke_procedure("proccessMapBuilder")
    !$diagramLegend = "**КАРТА ПРОЦЕССА**" + %newline() + "====" + %newline() + $processMap + %newline()

    /'Строим таблицу аудита'/
    %invoke_procedure("auditTableBuilder")
    !if $auditId > 0
        !$diagramLegend = $diagramLegend + %newline() + "**СОБЫТИЯ АУДИТА**" + %newline() + "====" + %newline() + $auditTable + %newline()
    !endif

    /'Строим таблицу со списком доработок'/
    !if $todoId > 0
        !$diagramLegend = $diagramLegend + %newline() + "**СПИСОК ДОРАБОТОК**" + %newline() + "====" + %newline()  + $todoList + %newline()
    !endif

/'Отображаем итоговую легенду диаграммы'/
legend  left
$diagramLegend
end legend
!end procedure

/'3. СЛУЖЕБНЫЕ ПРОЦЕДУРЫ
=========================================================================================================================
Процедуры, выполняющие служебные функции и операции с параметрами

/'Вспомогательная процедура, отвечает за построчное отображение текста'/
!unquoted procedure $textNewLineCutter($text, $length)
    !while %strpos(%substr($text,%intval($length)), " ") > 0 /'Пока в строке есть пробелы после ограничителя длины $length - делать перенос'/
        !$cutPosition = $length + %strpos(%substr($text, $length), " ") /'Поиск пробела'/
        !$textResult = $textResult + %substr($text, 0, $cutPosition) + " " + "\n"
        !$text = %substr($text,%intval($cutPosition))
    !endwhile
    !$textResult = $textResult + $text
!endprocedure

/'Процедура создания списка дел'/
!unquoted procedure todo($td)
    !$todoId = $todoId + 1
    %invoke_procedure("$textNewLineCutter", $td,$commentLength) /'Форматирование текста построчно'/
    !$tdresult = $textResult
    !$textResult = ""
    !$todoList = $todoList + %newline() + "| " + $todoId + " | " + $id + " | " + $tdresult + " |"
!endprocedure

/'Вспомогательная процедура для проверки существования участника по его алиасу'/
!unquoted procedure aliasCheck($alias)
    !$key = "name" + $alias
    !if %not(%variable_exists($key))
        !$a = %substr($alias,0,1)
        !$a = %upper($a)
        !$b = %substr($alias,1)
        !$resultName = $a + $b
        !if $alias == "user" || $alias == "client"
            %invoke_procedure("parties",actor,$resultName,$alias)
        !elseif $alias == "redis" || $alias == "PostgreSql" || $alias == "postgre" || $alias == "postgreSQL"
            %invoke_procedure("parties",database,$resultName,$alias)
        !elseif $alias == "kafka" || $alias == "rabbit" $alias == "MQ"
            %invoke_procedure("parties",queue,$resultName,$alias)
        !else
            %invoke_procedure("parties",participant,$resultName,$alias)
    !endif
!endprocedure

!unquoted procedure anchor($name)
        %set_variable_value($name,$id)
!end procedure

/'Процедура сохранения метаинформации по id шага процесса'/
!unquoted procedure setMetadataVariable($initiator, $executor, $action, $comment)
    !$idInitiator = $id + "initiator"
    !$idExecutor = $id + "executor"
    !$idAction = $id + "action"
    !$idComment = $id + "comment"
    %set_variable_value($idInitiator,$initiator)
    %set_variable_value($idExecutor,$executor)
    %set_variable_value($idAction,$action)
    %set_variable_value($idComment,$comment)
!endprocedure

/'Процедура для получения информации по шагу процесса'/
!unquoted procedure getMetadataByStep($i)
    /'Форматируем текст действия и комментария в многострочный вид'/
    !$idAction = $i + "action"
    !$keyAction = %get_variable_value($idAction)
    %invoke_procedure("$textNewLineCutter", $keyAction,$actionLength) /'Форматирование текста построчно'/
    !$actionResult = $textResult
    !$textResult = ""

    !$idComment = $i + "comment"
    !$keyComment = %get_variable_value($idComment)
    %invoke_procedure("$textNewLineCutter", $keyComment, $commentLength) /'Форматирование текста построчно'/
    !$commentResult = $textResult
    !$textResult = ""

    /'Получаем алиасы иницатора и исполнителя на каждом шаге,
    затем получаем их имена по полученным алиасам'/
    !$idInitiator = $i + "initiator"
    !$keyInitiator = %get_variable_value($idInitiator)
    !$keyInitiator = "name" + $keyInitiator
    !$initiatorName = %get_variable_value($keyInitiator)

    !$idExecutor = $i + "executor"
    !$keyExecutor = %get_variable_value($idExecutor)
    !$keyExecutor = "name" + $keyExecutor
    !$executorName = %get_variable_value($keyExecutor)
!endprocedure

/'Процедура для очистки буфферных переменных'/
!unquoted procedure bufferVariableCleaner()
    !$actionResult = ""
    !$commentResult = ""
    !$initiatorName = ""
    !$executorName = ""
    !$textResult = ""
!endprocedure

/'Процедура построения таблицы аудита'/
!unquoted procedure auditTableBuilder()
    !$i = 0
    !$r = ""
    !$auditTable = ""
    !while $i < $auditId || $i == $auditId
        !$r = "aud" + $i
        !$auditTable = $auditTable +  %newline() + %get_variable_value($r)
        !$i = $i + 1
    !endwhile
!endprocedure

/'Новая процедура построения карты процесса'/
!unquoted procedure proccessMapBuilder()
    !$i = 1
    !while $i < $id || $i == $id
        %invoke_procedure("getMetadataByStep",$i)
        /'Формируем таблицу для легенды'/
        !$processMap = $processMap + %newline() + "| " +  $i + " | " + $initiatorName + " | "+ $executorName + " | " + $actionResult + " | " + $commentResult + " |"
        !$i = $i + 1
        %invoke_procedure("bufferVariableCleaner")
    !endwhile
!endprocedure

/'4. ПАРАМЕТРЫ СТИЛЯ
========================================================================================================================='/
autonumber
!pragma teoz true
!theme cloudscape-design
skinparam dpi 70
skinparam maxMessageSize 400
skinparam backgroundColor LightGray
skinparam sequence {
ArrowColor blue
ActorBorderColor blue
LifeLineBorderColor blue
LifeLineBackgroundColor #White
ParticipantBorderColor blue
ParticipantBackgroundColor DodgerBlue
ParticipantFontName Impact
ParticipantFontSize 17
ParticipantFontColor #A9DCDF
ActorBackgroundColor DodgerBlue
ActorFontColor DeepSkyBlue
ActorFontSize 17
ActorFontName Aapex
}

!$link = "**<size:17><color:blue><&link-intact></color>**"
!$success = "**<size:20><color:green><&circle-check></color>**"
!$error = "**<size:20><color:red><&circle-x></color>**"
!$end = "**<size:20><color:red><&x></color>**"

/'САМА ДИАГРАММА
Данная диаграмма написана с применением библиотеки макросов автоподстановки, написанной Патрушевым Валерием.
Ознакомиться с билиотекой можно тут: https://github.com/leraRadicovich/plantUML_Lib
=========================================================================================================================
'/