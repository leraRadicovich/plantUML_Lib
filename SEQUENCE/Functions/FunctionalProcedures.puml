@startuml
/'2. ФУНКЦИОНАЛЬНЫЕ ПРОЦЕДУРЫ
========================================================================================
Процедуры, заменяющие штатные средства plantUml, например: создание участников,
отрисовка стрелок, отрисовка таблиц и т.д.

Вспомогательная процедура отрисовки участников: формирует мапу имя:алиас'/
!unquoted procedure parties($partyType, $name, $alias, $order="")
    !if $order != ""
        $partyType "$name" as $alias order $order
    !else
        $partyType "$name" as $alias
    !endif
    !$aliasName = "name" + $alias
    %set_variable_value($aliasName,$name)
!endprocedure

/'Процедуры rq и rs заменяют синтаксис рисования стрелок. Нужно вызвать процедуру в редакторе, передать ей параметры:
$initiator - участник-инициатор взаимодействия,
$executor - участник-исполнитель взаимодействия,
$liveLine - параметр управления линией жизни взаимодействия, подразумевается ++, --, --++, ++--, ...,
$action - описание взаимодействия,
$comment - комментарий для данной операции.
Процедура во время исполнения автоматически вызывает другую вспомогательную процедуру - $processDescriptionBuilder,
для построения карты процесса в виде текста с разделителями.
Для удобства использования необходимо создать шаблон автоподстановки в используемой вами среде разработке. В IDEA это находится в меню
settings -> editor -> LiveTemplates'/
!unquoted procedure rq($initiator, $executor, $liveLine="",$action, $comment="")
    !$id = $id + 1
    /'проверяем, что указанные initiator и executor объявлены на диаграмме,
    если нет - будут объявлены с именем и алиасом, указанными в этом шаге'/
    %invoke_procedure("aliasCheck",$initiator)
    %invoke_procedure("aliasCheck",$executor)
    $initiator -> $executor $liveLine: $action
    !$idInitiator = $id + "initiator"
    !$idExecutor = $id + "executor"
    !$idAction = $id + "action"
    !$idComment = $id + "comment"
    %set_variable_value($idInitiator,$initiator)
    %set_variable_value($idExecutor,$executor)
    %set_variable_value($idAction,$action)
    %set_variable_value($idComment,$comment)
!endprocedure

!unquoted procedure rs($executor, $initiator, $liveLine="",$action, $comment="")
    /'Это условие позволяет использовать процедуру для автоответов без явного указания инициатора и исполнителя,
    по requestHistory определяются участники последнего вызова. После отрисовки взаимодействия, значение requestHistory сбрасывается'/
    !if $executor == "" && $initiator == ""
        !$idInitiator = $id + "initiator"
        !$idExecutor = $id + "executor"
        !$ainitiator = %get_variable_value($idInitiator)
        !$aexecutor = %get_variable_value($idExecutor)
        %invoke_procedure("rs", $aexecutor, $ainitiator, $liveLine, $action, $comment)
    !else
        !if $liveLine == "..."
            $executor --> $initiator: $action
            ...
        !else
            $executor --> $initiator $liveLine: $action
        !endif
        !$id = $id + 1
        /'Для корректного отображения в карте процесса меняем исполнителя и иницатора местами'/
        !$idInitiator = $id + "executor"
        !$idExecutor = $id + "initiator"
        !$idAction = $id + "action"
        !$idComment = $id + "comment"
        %set_variable_value($idInitiator,$initiator)
        %set_variable_value($idExecutor,$executor)
        %set_variable_value($idAction,$action)
        %set_variable_value($idComment,$comment)
    !endif
!endprocedure

/'Процедура для формирования автоответа, берет из истории вызовов последний и инвертирует его,
НО не удаляя его из истории'/
!unquoted procedure altrs($x=$id, $liveLine="", $action, $comment="")
        !$idInitiator = $x + "initiator"
        !$idExecutor = $x + "executor"
        !$ainitiator = %get_variable_value($idInitiator)
        !$aexecutor = %get_variable_value($idExecutor)
    %invoke_procedure("rs", $aexecutor, $ainitiator, $liveLine, $action, $comment)
!endprocedure

/'Процедура для обработки событий Аудит'/
!unquoted procedure audit($event, $status = "", $description = "", $source = "pafp")
    !if $status == ""
        !$eventStart = "start" + $event
        %set_variable_value($eventStart,$id)
        hnote over $source #lightyellow/lightgreen: <color:red><&media-play> <color:black>$event
    !else
        %invoke_procedure("$textNewLineCutter",$description,$commentLength)
        !$auditDescription = $textResult
        !$textResult = ""
        !$auditId = $auditId + 1
        !$eventId = "aud" + $auditId
        !$key = "start" + $event
        !$startEvent = %get_variable_value($key)
        !$eventValue = %newline() + "| " + $auditId + " | " + $event + " | " + $startEvent + " | " + $id + " | " + $status + " | " + $auditDescription + " |"
        %set_variable_value($eventId,$eventValue)
        !if $status == "FAILURE"
            hnote over $source #orange/red: <color:red><&media-stop> <color:black>$event
        !else
            hnote over $source #lightyellow/lightgreen: <color:red><&media-stop> <color:black>$event
        !endif
    !endif
!end procedure

/'Новая процедура построения карты процесса'/
!unquoted procedure proccessMapBuilder()
    !$i = 1
    !while $i < $id || $i == $id
        %invoke_procedure("getMetadataByStep",$i)
        /'Формируем таблицу для легенды'/
        !$processMap = $processMap + %newline() + "| " +  $i + " | " + $initiatorName + " | "+ $executorName + " | " + $actionResult + " | " + $commentResult + " |"
        !$i = $i + 1
        %invoke_procedure("bufferVariableCleaner")
    !endwhile
!endprocedure

/'Процедуры создания заметок в виде легенды в начале диаграммы'/
!unquoted procedure todo($td)
    !$todoId = $todoId + 1
    %invoke_procedure("$textNewLineCutter", $td,$commentLength) /'Форматирование текста построчно'/
    !$tdresult = $textResult
    !$textResult = ""
    !$todoList = $todoList + %newline() + "| " + $todoId + " | " + $id + " | " + $tdresult + " |"
!endprocedure

/'Процедура, отображающая таблицу с заметками'/
!unquoted procedure todoNote()
note across
Список доработок
====
$todoList
end note
!end procedure

/'Процедура, отвечающая за отображение таблицы с описанием процесса.'/
!unquoted procedure NOTE()
    /'Строим крату процесса'/
    %invoke_procedure("proccessMapBuilder")
    note across
    $processMap
    end note
!end procedure

/'Процедура рисует строку из карты процесса для последней нарисованной стрелки'/
!unquoted procedure partnote()
    %invoke_procedure("getMetadataByStep",$id)
    /'Формируем таблицу для легенды'/
    !$partNote = "| " +  $id + " | " + $initiatorName + " | "+ $executorName + " | " + $actionResult + " | " + $commentResult + " |"
    note across
    $partNote
    end note
    %invoke_procedure("bufferVariableCleaner")
!end procedure

/'Строим крату процесса, таблицу событий аудита и список доработок'/
!unquoted procedure LEGEND()

    /'Отображаем построенные таблицы при их наличии'/
    %invoke_procedure("proccessMapBuilder")
    !$diagramLegend = "**КАРТА ПРОЦЕССА**" + %newline() + "====" + %newline() + $processMap + %newline()

    /'Строим таблицу аудита'/
        !$i = 0
        !$r = ""
        !$auditTable = ""
        !while $i < $auditId || $i == $auditId
            !$r = "aud" + $i
            !$auditTable = $auditTable + %get_variable_value($r)
            !$i = $i + 1
        !endwhile
    !if $auditId > 0
        !$diagramLegend = $diagramLegend + %newline() + "**СОБЫТИЯ АУДИТА**" + %newline() + "====" + %newline() + "| # | name | start | finish | status | description |" + $auditTable + %newline()
    !endif

    /'Строим таблицу со списком доработок'/
    !if $todoId > 0
        !$diagramLegend = $diagramLegend + %newline() + "**СПИСОК ДОРАБОТОК**" + %newline() + "====" + %newline()  + $todoList + %newline()
    !endif

/'Отображаем итоговую легенду диаграммы'/
legend  left
$diagramLegend
end legend
!end procedure