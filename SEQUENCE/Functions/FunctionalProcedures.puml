@startuml
/'3. ФУНКЦИОНАЛЬНЫЕ ПРОЦЕДУРЫ
========================================================================================
Процедуры, заменяющие штатные средства plantUml, например: создание участников,
отрисовка стрелок, отрисовка таблиц и т.д.

Вспомогательная процедура отрисовки участников: формирует мапу имя:алиас'/
!unquoted procedure parties($partyType="participant", $name, $alias, $order="")
    !if $order != ""
        $partyType "$name" as $alias order $order
    !else
        $partyType "$name" as $alias
    !endif
    !$partiesMapper = $partiesMapper + $alias + ":" + $name + ";"
!endprocedure

/'Процедуры rq и rs заменяют синтаксис рисования стрелок. Нужно вызвать процедуру в редакторе, передать ей параметры:
$initiator - участник-инициатор взаимодействия,
$executor - участник-исполнитель взаимодействия,
$liveLine - параметр управления линией жизни взаимодействия, подразумевается ++, --, --++, ++--, ...,
$action - описание взаимодействия,
$comment - комментарий для данной операции.
Процедура во время исполнения автоматически вызывает другую вспомогательную процедуру - $processDescriptionBuilder,
для построения карты процесса в виде текста с разделителями.
Для удобства использования необходимо создать шаблон автоподстановки в используемой вами среде разработке. В IDEA это находится в меню
settings -> editor -> LiveTemplates'/
!unquoted procedure rq($initiator, $executor, $liveLine="",$action, $comment="")
    $initiator -> $executor $liveLine: $action
    !$id = $id + 1
    %invoke_procedure("proccessMapBuilder",$id, $initiator, $executor, $action, $comment)
    !if $initiator != $executor
        !$requestHistory = $initiator + ":" + $executor + ";" + $requestHistory
    !endif
!endprocedure

!unquoted procedure rs($executor, $initiator, $liveLine="",$action, $comment="")
    /'Это условие позволяет использовать процедуру для автоответов без отдельного вызова autorq(,,"","","")'/
    !if $executor == "" && $initiator == ""
        !$ainitiator = %substr($requestHistory, 0, %strpos($requestHistory, ":"))
        !$requestHistory = %substr($requestHistory,%strpos($requestHistory,":")+1)
        !$aexecutor = %substr($requestHistory, 0,%strpos($requestHistory,";"))
        !$requestHistory = %substr($requestHistory,%strpos($requestHistory,";")+1)

        %invoke_procedure("rs", $aexecutor, $ainitiator, $liveLine, $action, $comment)

        !$ainitiator = ""
        !$aexecutor = ""
    !else
        !if $liveLine == "..."
            $executor --> $initiator: $action
            ...
            !$id = $id + 1
            %invoke_procedure("proccessMapBuilder",$id, $executor, $initiator, $action, $comment)
        !else
            $executor --> $initiator $liveLine: $action
            !$id = $id + 1
            %invoke_procedure("proccessMapBuilder",$id, $executor, $initiator, $action, $comment)
        !endif
    !endif
!endprocedure

/'Процедура для формирования автоответа, берет из истории вызовов последний и инвертирует его,
НО не удаляя его из истории'/
!unquoted procedure altrs($liveLine="", $action, $comment="")
    !$ainitiator = %substr($requestHistory, 0, %strpos($requestHistory, ":"))
    !$altRequestHistory = %substr($requestHistory, %strpos($requestHistory, ":")+1)
    !$aexecutor = %substr($altRequestHistory, 0, %strpos($altRequestHistory,";"))

    %invoke_procedure("rs", $aexecutor, $ainitiator, $liveLine, $action, $comment)
    !$ainitiator = ""
    !$aexecutor = ""
!endprocedure

/'Процедура для обработки событий Аудит'/
!unquoted procedure audit($event, $status = "", $description = "", $source = "pafp")
    !if $status == ""
        !$eventStartValue = $event + ":" + $id
        !$eventStart = "start" + $event
        %set_variable_value($eventStart,$eventStartValue)
        hnote over $source #lightyellow/lightgreen: <color:red><&media-play> <color:black>$event
    !else
        %invoke_procedure("$textNewLineCutter",$description,$commentLength)
        !$auditDescription = $textResult
        !$textResult = ""
        !$auditId = $auditId + 1
        !$eventId = "aud" + $auditId
        !$key = "start" + $event
        !$startEvent = %get_variable_value($key)
        !$startEvent = %substr($startEvent,%strpos($startEvent,":")+1)
        !$eventValue = %newline() + "| " + $auditId + " | " + $event + " | " + $startEvent + " | " + $id + " | " + $status + " | " + $auditDescription + " |"
        %set_variable_value($eventId,$eventValue)
        !if $status == "FAILURE"
            hnote over $source #orange/red: <color:red><&media-stop> <color:black>$event
        !else
            hnote over $source #lightyellow/lightgreen: <color:red><&media-stop> <color:black>$event
        !endif
    !endif
!end procedure

/'Новая процедура построения карты процесса'/
!unquoted procedure proccessMapBuilder($id, $initiator, $executor, $action, $comment="")
    !$legendId = "leg" + $id
    /'Форматируем текст действия в многострочный вид'/
    %invoke_procedure("$textNewLineCutter", $action,$actionLength) /'Форматирование текста построчно'/
    !$actionResult = $textResult
    !$textResult = ""

    /'Форматируем текст комментария в многострочный вид'/
    %invoke_procedure("$textNewLineCutter", $comment, $commentLength) /'Форматирование текста построчно'/
    !$commentResult = $textResult
    !$textResult = ""

    /'Получаем имя инициатора по его алиасу'/
    %invoke_procedure("$aliasToName", $initiator)
    !$initiatorName = $resultName
    !$resultName = ""

    /'Получаем имя исполнителя по его алиасу'/
    %invoke_procedure("$aliasToName", $executor)
    !$executorName = $resultName
    !$resultName = ""

    /'Текст в таблице для легенды'/
    !$legendValue = %newline() + "| " +  $id + " | " + $initiatorName + " | "+ $executorName + " | " + $actionResult + " | " + $commentResult + " |"
    %set_variable_value($legendId,$legendValue)
!endprocedure

/'Процедуры создания заметок в виде легенды в начале диаграммы'/
!unquoted procedure todo($td)
    !$todoId = $todoId + 1
    %invoke_procedure("$textNewLineCutter", $td,$commentLength) /'Форматирование текста построчно'/
    !$tdresult = $textResult
    !$textResult = ""
    !$todoList = $todoList + %newline() + "| " + $todoId + " | " + $id + " | " + $tdresult + " |"
!endprocedure

/'Процедура, отображающая таблицу с заметками'/
!unquoted procedure todoNote()
note across
Список доработок
====
$todoList
end note
!end procedure

/'Процедура, отвечающая за отображение таблицы с описанием процесса.'/
!unquoted procedure NOTE()
    /'Строим крату процесса'/
    !$i = 0
    !$r = ""
    !$table = ""
    !while $i < $id || $i == $id
        !$r = "leg" + $i
        !$table = $table + %get_variable_value($r)
        !$i = $i + 1
    !endwhile
    note across
    $table
    end note
!end procedure

/'Процедура рисует строку из карты процесса для последней нарисованной стрелки'/
!unquoted procedure partnote()
note across
%substr(%get_variable_value($legendId),1)
end note
!end procedure

/'Альтернативный способ построения карты процесса'/
!unquoted procedure LEGEND()
    /'Строим крату процесса'/
    !$i = 0
    !$r = ""
    !$ii = 0
    !$rr = ""
    !$table = ""
    !$auditTable = ""
    !while $i < $id || $i == $id
        !$r = "leg" + $i
        !$table = $table + %get_variable_value($r)
        !$i = $i + 1
    !endwhile
    !while $ii < $auditId || $ii == $auditId
        !$rr = "aud" + $ii
        !$auditTable = $auditTable + %get_variable_value($rr)
        !$ii = $ii + 1
    !endwhile

    !$diagramLegend = "**КАРТА ПРОЦЕССА**" + %newline() + "====" + %newline() + "| # | Инициатор | Исполнитель | Действие | Комментарий |" + $table + %newline()
    /'Строим таблицу аудита'/
    !if %strpos($auditTable,1) > 0
        !$diagramLegend = $diagramLegend + %newline() + "**СОБЫТИЯ АУДИТА**" + %newline() + "====" + %newline()  + "| # | name | start | finish | status | description |" + $auditTable + %newline()
    !endif
    /'Строим таблицу со списком доработок'/
    !if %strpos($todoList,1) > 0
        !$diagramLegend = $diagramLegend + %newline() + "**СПИСОК ДОРАБОТОК**" + %newline() + "====" + %newline()  + $todoList + %newline()
    !endif
legend  left
$diagramLegend
end legend
!end procedure