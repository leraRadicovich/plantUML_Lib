@startuml
/'3. СЛУЖЕБНЫЕ ПРОЦЕДУРЫ
=========================================================================================================================
Процедуры, выполняющие служебные функции и операции с параметрами

/'Вспомогательная процедура, отвечает за построчное отображение текста'/
!unquoted procedure $textNewLineCutter($text, $length)
!while %strpos(%substr($text,%intval($length)), " ") > 0 /'Пока в строке есть пробелы после ограничителя длины $length - делать перенос'/
!$cutPosition = $length + %strpos(%substr($text, $length), " ") /'Поиск пробела'/
!$textResult = $textResult + %substr($text, 0, $cutPosition) + " " + "\n"
!$text = %substr($text,%intval($cutPosition))
!endwhile
!$textResult = $textResult + $text
!endprocedure

/'Процедура создания списка дел'/
!unquoted procedure todo($td)
    !$todoId = $todoId + 1
    %invoke_procedure("$textNewLineCutter", $td,$commentLength) /'Форматирование текста построчно'/
    !$tdresult = $textResult
    !$textResult = ""
    !$todoList = $todoList + %newline() + "| " + $todoId + " | " + $id + " | " + $tdresult + " |"
!endprocedure

/'Вспомогательная процедура для проверки существования участника по его алиасу'/
!unquoted procedure aliasCheck($alias)
    !$key = "name" + $alias
    !if %not(%variable_exists($key))
        !$a = %substr($alias,0,1)
        !$a = %upper($a)
        !$b = %substr($alias,1)
        !$resultName = $a + $b
        !if $alias == "user" || $alias == "client"
            %invoke_procedure("parties",actor,$resultName,$alias)
        !elseif $alias == "redis" || $alias == "PostgreSql" || $alias == "postgre" || $alias == "postgreSQL"
            %invoke_procedure("parties",database,$resultName,$alias)
        !elseif $alias == "kafka" || $alias == "rabbit" || $alias == "MQ"
            %invoke_procedure("parties",queue,$resultName,$alias)
        !else
            %invoke_procedure("parties",participant,$resultName,$alias)
    !endif
!endprocedure

/'Процедура, создающая и запоминающая идентификатор - якорь'/
!unquoted procedure anchor($name)
        %set_variable_value($name,$id)
!end procedure

/'Процедура сохранения метаинформации по id шага процесса'/
!unquoted procedure setMetadataVariable($initiator, $executor, $liveline, $action, $comment, $type)
    !$idInitiator = $id + "initiator"
    !$idExecutor = $id + "executor"
    !$idAction = $id + "action"
    !$idComment = $id + "comment"
    !$idLiveline = $id + "liveline"
    !$idType = $id + "type"
    %set_variable_value($idInitiator,$initiator)
    %set_variable_value($idExecutor,$executor)
    %set_variable_value($idAction,$action)
    %set_variable_value($idComment,$comment)
    %set_variable_value($idLiveline,$liveline)
    %set_variable_value($idType,$type)
!endprocedure

/'Процедура для получения информации по шагу процесса для построения карты процесса
Соблюдением стиля кода пришлось пренебречь, т.к. иначе легенда не может построить таблицу'/
!unquoted procedure getMetadataByStep($i)
/'Форматируем текст действия и комментария в многострочный вид'/
!$idAction = $i + "action"
!$keyAction = %get_variable_value($idAction)
'%invoke_procedure("$textNewLineCutter", $keyAction,$actionLength) /'Форматирование текста построчно'/
!$actionResult = $keyAction
!$textResult = ""
/'Текст комментария'/
!$idComment = $i + "comment"
!$keyComment = %get_variable_value($idComment)
'%invoke_procedure("$textNewLineCutter", $keyComment, $commentLength) /'Форматирование текста построчно'/
!$commentResult = $keyComment
!$textResult = ""
/'Получаем алиасы иницатора и исполнителя на каждом шаге,
затем получаем их имена по полученным алиасам'/
!$idInitiator = $i + "initiator"
!$keyInitiator = %get_variable_value($idInitiator)
!$keyInitiator = "name" + $keyInitiator
!$initiatorName = %get_variable_value($keyInitiator)
!$idExecutor = $i + "executor"
!$keyExecutor = %get_variable_value($idExecutor)
!$keyExecutor = "name" + $keyExecutor
!$executorName = %get_variable_value($keyExecutor)
!$idLiveline = $i + "liveline"
!$keyLiveline = %get_variable_value($idLiveline)
!$idType = $i + "type"
!$keyType = %get_variable_value($idType)
!endprocedure

/'Процедура для получения информация по шагу процесса для его копирования'/
!unquoted procedure getMetadataByStepForCopy($i)
    !$idInitiator = $i + "initiator"
    !$getInitiator = %get_variable_value($idInitiator)

    !$idExecutor = $i + "executor"
    !$getExecutor = %get_variable_value($idExecutor)

    !$idType = $i + "type"
    !$getType = %get_variable_value($idType)
!end procedure

/'Процедура для очистки буфферных переменных'/
!unquoted procedure bufferVariableCleaner()
!$actionResult = ""
!$commentResult = ""
!$initiatorName = ""
!$executorName = ""
!$textResult = ""
!$getInitiator = ""
!$getExecutor = ""
!$getType = ""
!endprocedure

/'Процедура построения таблицы аудита'/
!unquoted procedure auditTableBuilder()
    !$i = 0
    !$r = ""
    !while $i < $auditId || $i == $auditId
        !$r = "aud" + $i
        !$auditTable = $auditTable + %get_variable_value($r)
        !$i = $i + 1
    !endwhile
!endprocedure

/'Новая процедура построения карты процесса'/
!unquoted procedure proccessMapBuilder()
    !$i = 1
    !while $i < $id || $i == $id
        %invoke_procedure("getMetadataByStep",$i)
        /'Формируем таблицу для легенды'/
        !$processMap = $processMap + %newline() + "| " +  $i + " | " + $initiatorName + " | "+ $executorName + " | " + $actionResult + " | " + $commentResult + " |"
        !$i = $i + 1
        %invoke_procedure("bufferVariableCleaner")
    !endwhile
!endprocedure

!unquoted procedure proccessMapBuilder1()
!$i = 1
| # | Инициатор | Исполнитель | Действие | Комментарий |
!while $i < $id || $i == $id
%invoke_procedure("getMetadataByStep",$i)
| $i | $initiatorName | $executorName | $actionResult | $commentResult |
!$i = $i + 1
%invoke_procedure("bufferVariableCleaner")
!endwhile
!endprocedure